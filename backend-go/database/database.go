package database

import (
	"fmt"
	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"os"
	"strings"
	"time"

	"backend-go/models"
)

var DB *gorm.DB

// InitDB inicializa la conexi√≥n a la base de datos y realiza las migraciones
func InitDB() error {
	// Cargar variables de entorno
	if err := godotenv.Load(); err != nil {
		fmt.Println("‚ö†Ô∏è Advertencia: No se pudo cargar .env, usando valores por defecto.")
	}

	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		fmt.Println("‚ö†Ô∏è DATABASE_URL no est√° configurada. Usando configuraci√≥n por defecto.")
		dbURL = "postgres://usuario:contrase√±a@host:puerto/dbname?sslmode=disable&pgbouncer=true&prepared_statements=false&prefer_simple_protocol=true"
	} else {
		// Agregar configuraci√≥n segura (sin statement_cache_mode)
		if !strings.Contains(dbURL, "?") {
			dbURL += "?pool_max_conns=10&statement_cache_mode=disable"
		} else {
			dbURL += "&pool_max_conns=10&statement_cache_mode=disable"
		}
	}

	fmt.Println("üîå Conectando a la base de datos:", dbURL)

	// Conexi√≥n con GORM
	db, err := gorm.Open(postgres.Open(dbURL), &gorm.Config{})
	if err != nil {
		return fmt.Errorf("‚ùå Error al conectar con la base de datos: %w", err)
	}

	DB = db

	// Configuraci√≥n de conexiones
	sqlDB, err := DB.DB()
	if err != nil {
		return fmt.Errorf("‚ùå Error al obtener sql.DB: %w", err)
	}

	sqlDB.SetConnMaxLifetime(0)
	sqlDB.SetMaxOpenConns(10)
	sqlDB.SetMaxIdleConns(5)

	if err = sqlDB.Ping(); err != nil {
		return fmt.Errorf("‚ùå No se pudo establecer conexi√≥n: %w", err)
	}

	fmt.Println("üöÄ ¬°Conexi√≥n a la base de datos exitosa!")
	return nil
}

// Reiniciar la conexi√≥n a la base de datos
func RestartDBConnection() error {
	// Cerrar la conexi√≥n actual
	sqlDB, err := DB.DB()
	if err != nil {
		return fmt.Errorf("‚ùå Error al obtener sql.DB para cierre: %w", err)
	}

	// Cerrar la conexi√≥n existente
	sqlDB.Close()
	fmt.Println("üîå Conexi√≥n a la base de datos cerrada.")

	// Esperar unos segundos antes de reabrir la conexi√≥n
	time.Sleep(2 * time.Second)

	// Volver a inicializar la conexi√≥n
	err = InitDB()
	if err != nil {
		return fmt.Errorf("‚ùå Error al reiniciar la conexi√≥n a la base de datos: %w", err)
	}

	fmt.Println("üîÑ Conexi√≥n a la base de datos reiniciada exitosamente.")
	return nil
}

// Migraciones con chequeo por tabla
func Migrate(DB *gorm.DB) error {
	// Lista de modelos a migrar
	modelsToMigrate := []interface{}{
		&models.User{},
		&models.Article{},
		&models.Order{},
		&models.OrderArticle{},
	}

	// Comprobamos si la tabla existe y realizamos la migraci√≥n si es necesario
	for _, model := range modelsToMigrate {
		if !DB.Migrator().HasTable(model) {
			fmt.Printf("üõ†Ô∏è Tabla no encontrada, creando: %T\n", model)
			if err := DB.AutoMigrate(model); err != nil {
				fmt.Printf("‚ùå Error migrando %T: %v\n", model, err)
				return err
			}
		} else {
			fmt.Printf("‚úÖ Tabla existente, saltando migraci√≥n: %T\n", model)
		}
	}

	// Devolvemos nil si todo sali√≥ bien
	return nil
}
